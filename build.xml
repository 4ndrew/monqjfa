<?xml version="1.0" encoding="iso-8859-1"?>
<!-- DOCTYPE date SYSTEM "ant.dtd" -->

<project name="monq" default="compile" basedir=".">
  <property file="${user.home}/.ant.properties"/>
  <import file="scripts/util.xml"/>
  <import file="scripts/cobertura.xml"/>
  <import file="scripts/junit.xml"/>
  <taskdef resource="net/sf/antcontrib/antlib.xml"/>
  
  <do-assert-var-set var="junit.jar"
                     text="Must be the full path of junit4.jar"/>

  <description>
    The MonQ library contains as its main contribution the
    monq.jfa.* packages which implement fast and scalable regular
    expression viz. NFA/DFA library.
  </description>

  <property environment="env" />
  <property name="NOT_stylefile" value="monq/jfa/ebistyle.css" />
  <property name="stylefile" value="src/monq/jfa/docstyle.css" />

  <property name="pubftp" value="/ebi/ftp/pub/software/textmining/monq" />
  <property name="pubhtml" value="/homes/kirsch/public_html" />

  <!-- *************************************************************** -->
  <!-- these are our source files -->
  <patternset id="jsrc" 
	      excludes="monq/**/keep/** monq/**/doc-files/** monq/**/*.html"
	      includes="monq/**/*.java"
	      >
    <exclude unless="xstream" name="monq/programs/DistFilter.java" />
    <exclude unless="xstream" name="monq/net/Filter*Info.java" />
  </patternset>

  <!-- these are the test source files -->
  <patternset id="testsrc" includes="monq/**/*.java *.java">
  </patternset>

  <!-- *************************************************************** -->
  <!-- check existence of certain features -->
  <target name="findfeatures">
    <available property="xstream" 
      classname="com.thoughtworks.xstream.XStream" />
  </target>

  <!-- *************************************************************** -->
  <!-- read current version to build from RELNOTES -->

  <target name="setVersion">
    <loadfile property="version" srcfile="Documentation/RELNOTES">
      <!-- someone had a half decent idea with these filter chains,
      but what is availabe is still bloody poor compared to a decent
      grep/sed/awk combination -->
      <filterchain>
	<linecontainsregexp>
	  <regexp pattern="VERSION +[a-z]*[0-9.]+" />
	</linecontainsregexp>
	<headfilter lines="1" />
	<striplinebreaks />
	<striplinebreaks linebreaks="VERSION&#xD;&#xA; " />
      </filterchain>
    </loadfile>
  </target>
  <!-- *************************************************************** -->

  <!-- before compilation, delete all class files to make sure there
  is no outdated stuff lurking -->
  <target name="purgeClasses">
    <dependset>
      <srcfileset dir="."><patternset refid="jsrc"/></srcfileset>
      <targetfileset dir="Classes" includes="**/*.class"/>
    </dependset>
  </target>

  <target name="warnXstream" unless="xstream">
    <echo>WARNING: com.thoughtworks.xstream.XStream not found, monq.programs.DistFilter will not be available. One easy way to provide this, is to add it to the CLASSPATH environment variable just before starting ant.</echo>
  </target>

  <!-- Main target is to compile all source files of the packages. -->
  <target name="compile" 
    depends="findfeatures,warnXstream,purgeClasses"
    description="compile all Java source files to ./Classes">
    <mkdir dir="build/classes"/>
    <javac srcdir="src"
	   destdir="build/classes" 
	   source="1.7"
           listfiles="no"
	   fork="true"
           debug="true"
           deprecation="true"
           includeantruntime="false">
      <compilerarg value="-Xlint:unchecked"/>
      <patternset refid="jsrc"/>
    </javac>
  </target>

  <!-- *************************************************************** -->
  <target name="test-coverage" depends="compile, compile-tests">
    <do-define-cobertura/>
    <do-cobertura-instrument/>
    <do-junit/>
    <do-cobertura-report/>
  </target>

  <!-- *************************************************************** -->
  <!-- packing a jar for the compiled distro -->
  <target name="jar" depends="compile, setVersion"
    description="creates the runtime library jar file">

    <mkdir dir="build/sitecontent/download" />

    <jar jarfile="build/sitecontent/download/monq-${version}.jar"
         basedir="build/classes"
         includes="monq/**">
      <manifest>
	<attribute name="Monq-Version" value="${version}"/>
      </manifest>
    </jar>
  </target>

  <!-- *************************************************************** -->
  <!-- create the documentation -->
  <target name="apidoc" depends="setVersion"
    description="create the API documentation in dist">

    <mkdir dir="build/sitecontent/monqApiDoc"/>
    <javadoc destdir="build/sitecontent/monqApiDoc"
	     Public="true" nodeprecated="false" 
	     author="true" nohelp="true"
	     source="1.7"
	     Windowtitle="monq packages"
             Header="monq-${version}"
	     Bottom="&lt;div class=&quot;monqlink&quot;>download: &lt;a href='https://pifpafpuf.de/Monq.jfa/download' target='_top'>pifpafpuf.de&lt;/a>&lt;br/>home page: &lt;a href=&quot;http://pifpafpuf.de/Monq.jfa/&quot; target='_top'>pifpafpuf.de/Monq.jfa&lt;/a>&lt;/div>"
	     Overview="src/monq/overview.html"
	     additionalparam="-quiet"
	     verbose="false"
             use="true"
	     >
      <packageset dir="src">
        <include name="monq/**"/>
        <!-- packageset just creates package names doc-files is no package -->
        <exclude name="**/doc-files"/>
      </packageset>
    </javadoc>

  </target>
  <!-- *************************************************************** -->
  <target name="apidocjar" depends="apidoc"
    description="jar file of the api documentation created with javadoc">
    <mkdir dir="build/sitecontent/download"/>
    <jar jarfile="build/sitecontent/download/monqApiDoc-${version}.jar" 
      basedir="build/sitecontent" 
      includes="monqApiDoc/**" />
  </target>

  <!-- *************************************************************** -->
  <target name="compile-tests" depends="purgeTest,compile">
    <mkdir dir="build/test-classes" />
    <javac srcdir="tests" destdir="build/test-classes"
      sourcepath="tests"
      classpath="build/classes:${junit.jar}"
      source="1.7" 
      listfiles="no"
      includeantruntime="false"
      debug="true">
      <patternset refid="testsrc"/>
    </javac>
  </target>

  <target name="purgeTest"> 
    <dependset>
      <srcfileset dir="tests" includes="*Test.java"/>
      <srcfileset dir="."><patternset refid="jsrc" /></srcfileset>
      <targetfileset dir="Classes/tests" includes="*.class"/>
    </dependset>
  </target>

  <!-- *************************************************************** -->
  <!-- ***************************************************************
  --> <!-- check whether svn status -u produces no output (except one
  line) and set property svnclean if this is so -->

  <target name="svnclean"
    description="check that svn status -u has no output">

    <exec executable="svn">
      <arg line="status -u" />
      <redirector outputproperty="svnstatus">
	<outputfilterchain>
	  <tailfilter lines="-1" skip="1"/>
	</outputfilterchain>
      </redirector>
    </exec>

    <condition property="svnclean">
      <or>
	<equals arg1="${svnstatus}" arg2="" trim="true"/>
	<isset property="pretend"/>
      </or>
    </condition>
    
  </target>

  <!-- *************************************************************** -->
  <!-- create a .tar.gz as for the source distribution -->
  <target name="tgz" 
    description="create .tar.gz for shipping the source (basically an svn-export) !!! not yet operational">
    <exec executable="svn" dir="dist">
      <arg line="-d ~/transfer -F -ver RELNOTES -s '2005-02-01'" />
    </exec>
  </target>
  
  <!-- *************************************************************** -->
  <target name="distftp" depends="svnclean,jar,apidocjar,apidoc"
    description="upload software distro files to berlios">

    <fail unless="svnclean">
      The command svn status -u produces the output 
${svnstatus}
      Please make sure that everything is up to date and checked in
      before publishing.      
    </fail>

    <!-- HINT: For ftp, apt-get install libcommons-net-java or similar
    is required here in addition consider a soft link in ~/.ant/lib to
    this library.
    -->

    <ftp server="ftp.berlios.de"
      userid="anonymous"
      password="monqJfaDeveloper"
      remotedir="incoming">
      <fileset dir="dist">
	<include name="monq-${version}.jar"/>
	<include name="monqApiDoc-${version}.jar"/>
      </fileset>
    </ftp>
  </target>

  <!-- *************************************************************** -->
  <!-- create a tgz of the home page files -->
  <target name="pubsite"
          depends="jar,apidoc,apidocjar,tutorial,test-coverage">
    <copy file="Documentation/RELNOTES" todir="build/sitecontent"/>
    <exec executable="rsync" dir="." failonerror="true">
      <arg value="-avrc"/>
      <arg value="--delete"/>
      <!-- not from source but actuall prevent deletion on target: -->
      <arg value="--exclude"/>
      <arg value="/index.html"/>
      <arg value="build/sitecontent/"/>
      <arg value="harald@gnuher.de:apache/pifpafpuf.de/Monq.jfa"/>
    </exec>

  </target>
  <!-- *************************************************************** -->
  <!-- run pdflatex to create the tutorial -->
  <target name="tutorial">
    <exec dir="Documentation/Tutorial" 
      executable="/bin/sh"
      failonerror="true"
      >
      <arg line="maketut"/>
    </exec>
    <mkdir dir="build/sitecontent/download"/>
    <copy todir="build/sitecontent/download">
      <fileset dir="Documentation/Tutorial">
        <include name="MonqJfaTutorial.pdf"/>
        <include name="*.java"/>
      </fileset>
    </copy>
  </target>
  <!-- *************************************************************** -->

</project>
 
